package gui;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import controlador.bd.Crud;
import controlador.bd.Sql4;
import controlador.bd.Sql5;
import controlador.user.ControladorTabla;
import controlador.user.ControladorVentana;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author berny
 */
public class DevolucionLibro extends javax.swing.JFrame {

    /**
     * Creates new form DevolucionLibro
     */
    Crud crud;
    private int idSeleccionado = -1;
    DefaultTableModel modelo;
    private int idFilaTemporal;

    public DevolucionLibro() {

        initComponents();

        estiloBuscador();
        estiloTabla();
        this.crud = new Crud();
        this.modelo = new DefaultTableModel();
        this.mostrarLibrosDev();
        ControladorVentana.ExitConfirmation(this);
        this.setExtendedState(MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLibros = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        btnBuscador = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txtBuscador = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Buscar libros", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 12), new java.awt.Color(17, 152, 85))); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblLibros.setForeground(new java.awt.Color(17, 152, 85));
        tblLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblLibros.getTableHeader().setReorderingAllowed(false);
        tblLibros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLibrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblLibros);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 610, 370));

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 170, 660, 430));

        jPanel3.setBackground(new java.awt.Color(17, 152, 85));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setForeground(new java.awt.Color(17, 152, 85));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/salida.png"))); // NOI18N
        jButton2.setText("Regresar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 0, 200, 30));

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1370, 30));

        jLabel2.setBackground(new java.awt.Color(0, 51, 153));
        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(17, 152, 85));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/libro.png"))); // NOI18N
        jLabel2.setText("Devolución de libros");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 640, 90));

        btnEliminar.setText("Devolver");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 620, 150, 40));

        btnBuscador.setForeground(new java.awt.Color(17, 152, 85));
        btnBuscador.setText("Buscar");
        btnBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscadorActionPerformed(evt);
            }
        });
        jPanel2.add(btnBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 240, -1, 40));

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(17, 152, 85));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Clave del prestamo:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 120, 40));

        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscadorKeyTyped(evt);
            }
        });
        jPanel2.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 240, 210, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1370, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscadorActionPerformed
        // TODO add your handling code here:

        if (evt.getSource() == this.btnBuscador) {
            buscar();
        }
    }//GEN-LAST:event_btnBuscadorActionPerformed

    private void tblLibrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLibrosMouseClicked

        int fila = this.tblLibros.getSelectedRow();
        idSeleccionado = Integer.parseInt(tblLibros.getValueAt(fila, 0).toString());
        ControladorTabla.getInstance().setIdSeleccionado(idSeleccionado);
    }//GEN-LAST:event_tblLibrosMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        VentanaPrincipal newframe = new VentanaPrincipal();
        newframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:

        Inventario inv = new Inventario();
        RegistroLibro rl = new RegistroLibro();

        if (tblLibros.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Error: no seleccionó un registro");
        } else {
            int idPrestamo = this.idSeleccionado; // Asumiendo que idSeleccionado es el ID del préstamo seleccionado
            int idLibro = obtenerIdLibroDesdePrestamo(idPrestamo); // Método para obtener id_libro desde el id_prestamo

            boolean resultado = this.crud.actualizarEliminar(Sql5.eliminarPrestamo(idPrestamo));

            if (resultado) {
                // Obtener la cantidad disponible actual
                ResultSet rs = crud.seleccionar("SELECT cantidadDisponible FROM inventario WHERE id_libro = " + idLibro);
                try {
                    if (rs.next()) {
                        int cantidadDisponible = rs.getInt("cantidadDisponible");
                        int nuevaCantidadDisponible = cantidadDisponible + 1;

                        // Actualizar la cantidad disponible en el inventario
                        boolean actualizacion = crud.actualizarCantidadDisponibleInventario(idLibro, nuevaCantidadDisponible);

                        if (actualizacion) {
                            JOptionPane.showMessageDialog(null, "Préstamo eliminado y cantidad disponible actualizada", "Éxito", 1);
                            mostrarLibrosDev(); // Actualiza la tabla de libros
                            inv.mostrarInventario(); // Actualiza la tabla de inventario
                        } else {
                            JOptionPane.showMessageDialog(null, "Préstamo eliminado pero no se pudo actualizar la cantidad disponible", "Error", 2);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(DevolucionLibro.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo eliminar el préstamo", "Error", 2);
            }
        }


    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtBuscadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorKeyTyped
        // TODO add your handling code here:

        if (this.txtBuscador.getText().length() >= 4) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Limite de caracteres alcanzado", "Longitud de caracteres", JOptionPane.INFORMATION_MESSAGE);

        }

        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();

            JOptionPane.showMessageDialog(null, "No puede ingresar letras", "Tipo de entrada", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_txtBuscadorKeyTyped

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscador;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLibros;
    private javax.swing.JTextField txtBuscador;
    // End of variables declaration//GEN-END:variables

    private void mostrarLibrosDev() {

        this.modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que todas las celdas sean no editables
            }
        };

        this.modelo.addColumn("Clave prestamo");
        this.modelo.addColumn("Fecha de prestamo");
        this.modelo.addColumn("Fecha de devolución");
        this.modelo.addColumn("Clave del libro");
        this.modelo.addColumn("Clave del alumno");

        try {
            ResultSet resultado = this.crud.seleccionar(Sql5.seleccionarPrestamo());

            while (resultado.next()) {  //usar objeto resultado y el metodo next que permitira iterar entre todos los resultados

                Object[] libros = { //objeto que se anexara al modelo

                    resultado.getInt(1),
                    resultado.getDate(2), //Stock
                    resultado.getDate(3),
                    resultado.getInt(4),
                    resultado.getInt(5)

//                   resultado.getInt(1),
//                    resultado.getString(2),
//                    resultado.getString(3),
//                    resultado.getString(4),
////                    resultado.getString(5),
////                    resultado.getInt(6),
//                    resultado.getInt(5)
                };

                modelo.addRow(libros);

            }//cierra while

            this.tblLibros.setModel(modelo);

        } catch (SQLException e) {
            System.out.println("error " + e.getMessage());
        }

    }

    private void buscar() {
        try {
            int idBuscar = Integer.parseInt(this.txtBuscador.getText());
            int filas = this.modelo.getRowCount();

            if (idBuscar != -1) {
                for (int i = 0; i < filas; i++) {
                    int idModelo = Integer.parseInt(modelo.getValueAt(i, 0).toString());
                    if (idModelo == idBuscar) {
                        this.idFilaTemporal = i;
                        this.tblLibros.setRowSelectionInterval(i, i);
                        this.tblLibros.scrollRectToVisible(this.tblLibros.getCellRect(i, 0, true));
                        ControladorTabla.getInstance().setIdSeleccionado(idModelo);

                        return;
                    }
                }

            }
            JOptionPane.showMessageDialog(null, "Número no encontrado",
                    "Error", JOptionPane.ERROR_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato invalido",
                    "Error de formato", JOptionPane.ERROR_MESSAGE);
        } //cierra catch
    } //cierra buscar

    public int obtenerIdLibroDesdePrestamo(int idPrestamo) {
        try {
            String sql = "SELECT id_libro FROM prestamo WHERE id_prestamo = " + idPrestamo;
            ResultSet rs = crud.seleccionar(sql);
            if (rs.next()) {
                return rs.getInt("id_libro");
            }
        } catch (SQLException e) {
            System.out.println("Error al obtener el ID del libro: " + e.getMessage());
        }
        return -1; // Retorna -1 si no se encontró el id_prestamo
    }

    private void estiloBuscador() {

        txtBuscador.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Buscar...");

        txtBuscador.putClientProperty(FlatClientProperties.TEXT_FIELD_LEADING_ICON, new FlatSVGIcon("img/buscador.svg"));

        txtBuscador.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "borderWidth:0;"
                + "focusWidth:0;"
                + "innerFocusWidth:0;"
                + "margin:5,20,5,20;"
                + "background:$Panel.background");
    }

    private void estiloTabla() {

        jScrollPane1.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$Table.background;");

        tblLibros.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "height:30;"
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                + "separatorColor:$TableHeader.background;"
                + "font:bold;");

        tblLibros.putClientProperty(FlatClientProperties.STYLE, ""
                + "rowHeight:30;"
                + "showHorizontalLines:true;"
                + "intercellSpacing:0,1;"
                + "cellFocusColor:$TableHeader.hoverBackground;"
                + "selectionBackground:$TableHeader.hoverBackground;"
                + "selectionForeground:$Table.foreground;");

    }

}
