package gui;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import controlador.bd.Crud;
import controlador.bd.Sql2;
import controlador.bd.Sql4;
import controlador.bd.Sql5;
import controlador.user.ControladorVentana;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import modelo.Prestamo;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import gui.Inventario;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Prestamos extends javax.swing.JFrame {

    Crud crud;
    private int idFilaTemporal;
    DefaultTableModel modelo;
    DefaultTableModel modelo2;
    

    public Prestamos() {
        initComponents();
        estiloBuscador();
        estiloTabla();
        this.setTitle("Prestamos");
        this.crud = new Crud();
        this.modelo = new DefaultTableModel();
        this.modelo2 = new DefaultTableModel();
        this.mostrarLibros2();
        this.mostrarAlumnos();
        this.setExtendedState(MAXIMIZED_BOTH);
        ControladorVentana.ExitConfirmation(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtBuscador2 = new javax.swing.JTextField();
        btnBuscarAlumno = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtNAlumno = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        fecDevo = new com.toedter.calendar.JDateChooser();
        fecPres = new com.toedter.calendar.JDateChooser();
        txtNLibro = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrestamos = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNAlumno = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtBuscador = new javax.swing.JTextField();
        btnBuscarLibro = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBuscador2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscador2ActionPerformed(evt);
            }
        });
        txtBuscador2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscador2KeyTyped(evt);
            }
        });
        jPanel1.add(txtBuscador2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 180, 250, 40));

        btnBuscarAlumno.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        btnBuscarAlumno.setForeground(new java.awt.Color(17, 152, 85));
        btnBuscarAlumno.setText("Buscar alumno");
        btnBuscarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarAlumnoActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscarAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 180, 160, 40));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Prestamo de Libro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 12), new java.awt.Color(17, 152, 85))); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNAlumno.setEnabled(false);
        jPanel2.add(txtNAlumno, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 90, 40));

        jLabel2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(17, 152, 85));
        jLabel2.setText("Fecha de prestamo:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 130, 20));

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(17, 152, 85));
        jLabel3.setText("Fecha de devoluci√≥n:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 140, 20));

        fecDevo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecDevoKeyTyped(evt);
            }
        });
        jPanel2.add(fecDevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, 180, 40));

        fecPres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fecPresKeyTyped(evt);
            }
        });
        jPanel2.add(fecPres, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 180, 40));

        txtNLibro.setEnabled(false);
        jPanel2.add(txtNLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 90, 40));

        tblPrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPrestamos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblPrestamos);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 50, -1, 150));

        tblNAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblNAlumno);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 270, -1, 150));

        jLabel8.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(17, 152, 85));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Clave del libro:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 90, 50));

        jLabel5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(17, 152, 85));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Clave del alumno:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 120, 40));

        btnRegistrar.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        btnRegistrar.setForeground(new java.awt.Color(17, 152, 85));
        btnRegistrar.setText("Solicitar prestamo");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        jPanel2.add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 360, 180, 60));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 1110, 490));

        jPanel3.setBackground(new java.awt.Color(17, 152, 85));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton4.setForeground(new java.awt.Color(17, 152, 85));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/salida.png"))); // NOI18N
        jButton4.setText("Regresar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 0, 220, 30));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1380, 30));

        jLabel4.setBackground(new java.awt.Color(0, 51, 153));
        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 48)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(17, 152, 85));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/libro.png"))); // NOI18N
        jLabel4.setText("Prestamos");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 400, 90));

        txtBuscador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscadorActionPerformed(evt);
            }
        });
        txtBuscador.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscadorKeyTyped(evt);
            }
        });
        jPanel1.add(txtBuscador, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 180, 250, 40));

        btnBuscarLibro.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        btnBuscarLibro.setForeground(new java.awt.Color(17, 152, 85));
        btnBuscarLibro.setText("Buscar libro");
        btnBuscarLibro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarLibroActionPerformed(evt);
            }
        });
        jPanel1.add(btnBuscarLibro, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 180, 140, 40));

        jLabel7.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(17, 152, 85));
        jLabel7.setText("Clave del libro:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 90, 40));

        jLabel9.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(17, 152, 85));
        jLabel9.setText("Clave del alumno:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 180, 110, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscador2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscador2ActionPerformed

    }//GEN-LAST:event_txtBuscador2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        VentanaPrincipal newframe = new VentanaPrincipal();
        newframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void fecPresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecPresKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();

            JOptionPane.showMessageDialog(null, "No puede ingresar letras", "Tipo de entrada", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_fecPresKeyTyped

    private void fecDevoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fecDevoKeyTyped
        // TODO add your handling code here:

        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();

            JOptionPane.showMessageDialog(null, "No puede ingresar letras", "Tipo de entrada", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_fecDevoKeyTyped

    private void txtBuscador2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscador2KeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        int keyCode = evt.getKeyCode();

        if (Character.isLetter(c)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,
                    "No puede ingresar letras",
                    "Tipo de entrada", JOptionPane.WARNING_MESSAGE);
        }

        if (this.txtBuscador2.getText().length() >= 4) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Limite de caracteres alcanzado", "Longitud de caracteres", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_txtBuscador2KeyTyped

    private void btnBuscarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarAlumnoActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == this.btnBuscarAlumno) {
            buscarAlumno();
        }

    }//GEN-LAST:event_btnBuscarAlumnoActionPerformed

    private void txtBuscadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscadorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBuscadorActionPerformed

    private void txtBuscadorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscadorKeyTyped
        // TODO add your handling code here:

        char c = evt.getKeyChar();
        int keyCode = evt.getKeyCode();

        if (Character.isLetter(c)) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null,
                    "No puede ingresar letras",
                    "Tipo de entrada", JOptionPane.WARNING_MESSAGE);
        }

        if (this.txtBuscador.getText().length() >= 4) {
            evt.consume();
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Limite de caracteres alcanzado", "Longitud de caracteres", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_txtBuscadorKeyTyped

    private void btnBuscarLibroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarLibroActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == this.btnBuscarLibro) {
            buscarLibro();
        }

    }//GEN-LAST:event_btnBuscarLibroActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        
        Inventario inv = new Inventario();
 if (this.txtNAlumno.getText().isEmpty()
        || this.txtNLibro.getText().isEmpty()
        || this.fecPres.getDate() == null
        || this.fecDevo.getDate() == null) {
    JOptionPane.showMessageDialog(null, "Por favor complete todos los campos", "Campos en blanco", JOptionPane.INFORMATION_MESSAGE);
} else {
    Date fechaPrestamo = fecPres.getDate();
    Date fechaDevolucion = fecDevo.getDate();
    Prestamo prestamo = new Prestamo();
    prestamo.setFecPrestamo(fechaPrestamo);
    prestamo.setFecDev(fechaDevolucion);

    int idLibro = Integer.parseInt(this.txtNLibro.getText());
    prestamo.setFkIdLibro(idLibro);
    int idAlumno = Integer.parseInt(this.txtNAlumno.getText());
    prestamo.setFkIdAlumno(idAlumno);

    Crud crud = new Crud();

    // Verificar disponibilidad antes de registrar el pr√©stamo
    if (inv.verificarDisponibilidad(idLibro)) {
        boolean resultado = crud.insertar(Sql5.insertarPrestamo(prestamo));

        if (resultado) {
            // Obtener la cantidad disponible actual
            ResultSet rs = crud.seleccionar("SELECT cantidadDisponible FROM inventario WHERE id_libro = " + idLibro);
            try {
                if (rs.next()) {
                    int cantidadDisponible = rs.getInt("cantidadDisponible");
                    int nuevaCantidadDisponible = cantidadDisponible - 1;
                    
                    // Actualizar la cantidad disponible en el inventario
                    boolean actualizacion = crud.actualizarCantidadDisponibleInventario(idLibro, nuevaCantidadDisponible);
                    
                    if (actualizacion) {
                        JOptionPane.showMessageDialog(null, "Pr√©stamo registrado y cantidad disponible actualizada", "√âxito", 1);
                        mostrarLibros2(); // Actualiza la tabla de libros
//                        inv.mostrarInventario(); // Actualiza la tabla de inventario
                    } else {
                        JOptionPane.showMessageDialog(null, "Pr√©stamo registrado pero no se pudo actualizar la cantidad disponible", "Error", 2);
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error con la base de datos", "Error", 2);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ocurri√≥ un error al registrar el pr√©stamo", "Error", 2);
        }
    } else {
        JOptionPane.showMessageDialog(null, "No hay ejemplares disponibles para el pr√©stamo");
    }
}



    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarAlumno;
    private javax.swing.JButton btnBuscarLibro;
    private javax.swing.JButton btnRegistrar;
    private com.toedter.calendar.JDateChooser fecDevo;
    private com.toedter.calendar.JDateChooser fecPres;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblNAlumno;
    private javax.swing.JTable tblPrestamos;
    private javax.swing.JTextField txtBuscador;
    private javax.swing.JTextField txtBuscador2;
    private javax.swing.JTextField txtNAlumno;
    private javax.swing.JTextField txtNLibro;
    // End of variables declaration//GEN-END:variables

    private void mostrarLibros2() {

        this.modelo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que todas las celdas sean no editables
            }
        };

        this.modelo.addColumn("Clave del libro");
        this.modelo.addColumn("Nombre del libro");
        this.modelo.addColumn("Cantidad");

        try {
            ResultSet resultado = this.crud.seleccionar(Sql4.seleccionarLibro2());

            while (resultado.next()) {  //usar objeto resultado y el metodo next que permitira iterar entre todos los resultados

                Object[] libros = { //objeto que se anexara al modelo

                    resultado.getInt(1),
                    resultado.getString(2),
                    //                     resultado.getString(3),
                    //                     resultado.getString(4),
                    //                     resultado.getString(5),
                    //                     resultado.getInt(6),
                    resultado.getInt(3)
                };

                modelo.addRow(libros);

            }//cierra while

            this.tblPrestamos.setModel(modelo);

        } catch (SQLException e) {
            System.out.println("error " + e.getMessage());
        }

    }

    private void mostrarAlumnos() {

        this.modelo2 = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que todas las celdas sean no editables
            }
        };

        this.modelo2.addColumn("Clave del alumno");
        this.modelo2.addColumn("Nombre");

        try {
            ResultSet resultado = this.crud.seleccionar(Sql2.seleccionarAlumnos2());

            while (resultado.next()) {  //usar objeto resultado y el metodo next que permitira iterar entre todos los resultados

                Object[] alumnos = { //objeto que se anexara al modelo

                    resultado.getInt(1),
                    resultado.getString(2)

                };

                modelo2.addRow(alumnos);

            }//cierra while

            this.tblNAlumno.setModel(modelo2);

        } catch (SQLException e) {
            System.out.println("error " + e.getMessage());
        }

    }// cierra metodo mostrarAlumnos     

    private void buscarLibro() {
        try {
            int idBuscar = Integer.parseInt(this.txtBuscador.getText());
            int filas = this.modelo.getRowCount();
            if (idBuscar != -1) {
                for (int i = 0; i < filas; i++) {
                    int idModelo = Integer.parseInt(modelo.getValueAt(i, 0).toString());
                    if (idModelo == idBuscar) {

                        // Establecer los datos en el JTextField
                        this.txtNLibro.setText(modelo.getValueAt(i, 0).toString());

                        this.idFilaTemporal = i;
                        this.tblPrestamos.setRowSelectionInterval(i, i);
                        this.tblPrestamos.scrollRectToVisible(this.tblPrestamos.getCellRect(i, 0, true));

                        return;
                    }
                }

            }
            JOptionPane.showMessageDialog(null, "Libro no encontrado",
                    "Error", JOptionPane.ERROR_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato invalido",
                    "Error de formato", JOptionPane.ERROR_MESSAGE);
        } //cierra catch
    }

    private void buscarAlumno() {
        try {
            int idBuscar = Integer.parseInt(this.txtBuscador2.getText());
            int filas = this.modelo2.getRowCount();
            if (idBuscar != -1) {
                for (int i = 0; i < filas; i++) {
                    int idModelo = Integer.parseInt(modelo2.getValueAt(i, 0).toString());
                    if (idModelo == idBuscar) {

                        this.txtNAlumno.setText(modelo2.getValueAt(i, 0).toString());

                        this.idFilaTemporal = i;
                        this.tblNAlumno.setRowSelectionInterval(i, i);
                        this.tblNAlumno.scrollRectToVisible(this.tblNAlumno.getCellRect(i, 0, true));
//                        this.txt.setText(modelo.getValueAt(i, 1).toString());
                        return;
                    }
                }

            }
            JOptionPane.showMessageDialog(null, "Alumno no encontrado",
                    "Error", JOptionPane.ERROR_MESSAGE);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Formato invalido",
                    "Error de formato", JOptionPane.ERROR_MESSAGE);
        } //cierra catch
    }
    
    
    
     private void estiloBuscador() {
         
         
         txtNLibro.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "borderWidth:0;"
                + "focusWidth:0;"
                + "innerFocusWidth:0;"
                + "margin:5,20,5,20;"
                + "background:$Panel.background");
         
         txtNAlumno.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "borderWidth:0;"
                + "focusWidth:0;"
                + "innerFocusWidth:0;"
                + "margin:5,20,5,20;"
                + "background:$Panel.background");

        txtBuscador.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Buscar...");

        txtBuscador.putClientProperty(FlatClientProperties.TEXT_FIELD_LEADING_ICON, new FlatSVGIcon("img/buscador.svg"));

        txtBuscador.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "borderWidth:0;"
                + "focusWidth:0;"
                + "innerFocusWidth:0;"
                + "margin:5,20,5,20;"
                + "background:$Panel.background");
        
        
        txtBuscador2.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Buscar...");

        txtBuscador2.putClientProperty(FlatClientProperties.TEXT_FIELD_LEADING_ICON, new FlatSVGIcon("img/buscador.svg"));

        txtBuscador2.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "borderWidth:0;"
                + "focusWidth:0;"
                + "innerFocusWidth:0;"
                + "margin:5,20,5,20;"
                + "background:$Panel.background");
    }
    
    
    private void estiloTabla(){
        
        fecPres.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "background:$Panel.background");
        
        fecDevo.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:13;"
                + "background:$Panel.background");
        
         jScrollPane1.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$Table.background;");
        
        
         tblNAlumno.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "height:30;"
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                + "separatorColor:$TableHeader.background;"
                + "font:bold;");

        tblNAlumno.putClientProperty(FlatClientProperties.STYLE, ""
                + "rowHeight:30;"
                + "showHorizontalLines:true;"
                + "intercellSpacing:0,1;"
                + "cellFocusColor:$TableHeader.hoverBackground;"
                + "selectionBackground:$TableHeader.hoverBackground;"
                + "selectionForeground:$Table.foreground;");
        
        
         jScrollPane2.putClientProperty(FlatClientProperties.STYLE, ""
                + "arc:25;"
                + "background:$Table.background;");
        
         tblPrestamos.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "height:30;"
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                + "separatorColor:$TableHeader.background;"
                + "font:bold;");

        tblPrestamos.putClientProperty(FlatClientProperties.STYLE, ""
                + "rowHeight:30;"
                + "showHorizontalLines:true;"
                + "intercellSpacing:0,1;"
                + "cellFocusColor:$TableHeader.hoverBackground;"
                + "selectionBackground:$TableHeader.hoverBackground;"
                + "selectionForeground:$Table.foreground;");
    }

} //cierra clase
